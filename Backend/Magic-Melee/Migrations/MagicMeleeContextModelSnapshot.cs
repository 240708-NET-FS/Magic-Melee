// <auto-generated />
using MagicMelee.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Magic_Melee.Migrations
{
    [DbContext(typeof(MagicMeleeContext))]
    partial class MagicMeleeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MagicMelee.Models.AbilityScoreArr", b =>
                {
                    b.Property<int>("AbilityScoreArrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AbilityScoreArrId"));

                    b.Property<int>("Cha")
                        .HasColumnType("int");

                    b.Property<int>("Con")
                        .HasColumnType("int");

                    b.Property<int>("Dex")
                        .HasColumnType("int");

                    b.Property<int>("Int")
                        .HasColumnType("int");

                    b.Property<int>("Str")
                        .HasColumnType("int");

                    b.Property<int>("Wis")
                        .HasColumnType("int");

                    b.HasKey("AbilityScoreArrId");

                    b.ToTable("AbilityScoreArr");
                });

            modelBuilder.Entity("MagicMelee.Models.CharacterClass", b =>
                {
                    b.Property<int>("CharacterClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacterClassId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CharacterClassId");

                    b.ToTable("CharacterClasses");
                });

            modelBuilder.Entity("MagicMelee.Models.CharacterRace", b =>
                {
                    b.Property<int>("CharacterRaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacterRaceId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Speed")
                        .HasColumnType("int");

                    b.HasKey("CharacterRaceId");

                    b.ToTable("CharacterRaces");
                });

            modelBuilder.Entity("MagicMelee.Models.CharacterSpell", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("SpellId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "SpellId");

                    b.HasIndex("SpellId");

                    b.ToTable("CharacterSpells");
                });

            modelBuilder.Entity("MagicMelee.Models.DndCharacter", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacterId"));

                    b.Property<int>("AbilityScoreArrId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterClassId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterLevel")
                        .HasColumnType("int");

                    b.Property<string>("CharacterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CharacterRaceId")
                        .HasColumnType("int");

                    b.Property<int>("HitPoints")
                        .HasColumnType("int");

                    b.Property<int>("MaxHitPoints")
                        .HasColumnType("int");

                    b.Property<int>("SkillsId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId");

                    b.HasIndex("AbilityScoreArrId")
                        .IsUnique();

                    b.HasIndex("CharacterClassId")
                        .IsUnique();

                    b.HasIndex("CharacterRaceId")
                        .IsUnique();

                    b.HasIndex("SkillsId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("DndCharacters");
                });

            modelBuilder.Entity("MagicMelee.Models.Login", b =>
                {
                    b.Property<int>("LoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoginId"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("MagicMelee.Models.Skills", b =>
                {
                    b.Property<int>("SkillsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillsId"));

                    b.Property<int>("Acrobatics")
                        .HasColumnType("int");

                    b.Property<int>("AnimalHandling")
                        .HasColumnType("int");

                    b.Property<int>("Arcana")
                        .HasColumnType("int");

                    b.Property<int>("Athletics")
                        .HasColumnType("int");

                    b.Property<int>("Deception")
                        .HasColumnType("int");

                    b.Property<int>("History")
                        .HasColumnType("int");

                    b.Property<int>("Insight")
                        .HasColumnType("int");

                    b.Property<int>("Intimidation")
                        .HasColumnType("int");

                    b.Property<int>("Investigation")
                        .HasColumnType("int");

                    b.Property<int>("Medicine")
                        .HasColumnType("int");

                    b.Property<int>("Nature")
                        .HasColumnType("int");

                    b.Property<int>("Perception")
                        .HasColumnType("int");

                    b.Property<int>("Performance")
                        .HasColumnType("int");

                    b.Property<int>("Persuasion")
                        .HasColumnType("int");

                    b.Property<int>("Religion")
                        .HasColumnType("int");

                    b.Property<int>("SleightOfHand")
                        .HasColumnType("int");

                    b.Property<int>("Stealth")
                        .HasColumnType("int");

                    b.Property<int>("Survival")
                        .HasColumnType("int");

                    b.HasKey("SkillsId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("MagicMelee.Models.Spell", b =>
                {
                    b.Property<int>("SpellId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpellId"));

                    b.Property<string>("SpellDamageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpellLevel")
                        .HasColumnType("int");

                    b.Property<string>("SpellName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpellRange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpellId");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("MagicMelee.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MagicMelee.Models.CharacterSpell", b =>
                {
                    b.HasOne("MagicMelee.Models.DndCharacter", "DndCharacter")
                        .WithMany("CharacterSpells")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagicMelee.Models.Spell", "Spell")
                        .WithMany("CharacterSpells")
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DndCharacter");

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("MagicMelee.Models.DndCharacter", b =>
                {
                    b.HasOne("MagicMelee.Models.AbilityScoreArr", "AbilityScoreArr")
                        .WithOne("DndCharacter")
                        .HasForeignKey("MagicMelee.Models.DndCharacter", "AbilityScoreArrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagicMelee.Models.CharacterClass", "CharacterClass")
                        .WithOne("DndCharacter")
                        .HasForeignKey("MagicMelee.Models.DndCharacter", "CharacterClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagicMelee.Models.CharacterRace", "CharacterRace")
                        .WithOne("DndCharacter")
                        .HasForeignKey("MagicMelee.Models.DndCharacter", "CharacterRaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagicMelee.Models.Skills", "Skills")
                        .WithOne("DndCharacter")
                        .HasForeignKey("MagicMelee.Models.DndCharacter", "SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagicMelee.Models.User", "User")
                        .WithMany("ExistingCharacters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AbilityScoreArr");

                    b.Navigation("CharacterClass");

                    b.Navigation("CharacterRace");

                    b.Navigation("Skills");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MagicMelee.Models.Login", b =>
                {
                    b.HasOne("MagicMelee.Models.User", "User")
                        .WithOne("Login")
                        .HasForeignKey("MagicMelee.Models.Login", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MagicMelee.Models.AbilityScoreArr", b =>
                {
                    b.Navigation("DndCharacter")
                        .IsRequired();
                });

            modelBuilder.Entity("MagicMelee.Models.CharacterClass", b =>
                {
                    b.Navigation("DndCharacter")
                        .IsRequired();
                });

            modelBuilder.Entity("MagicMelee.Models.CharacterRace", b =>
                {
                    b.Navigation("DndCharacter")
                        .IsRequired();
                });

            modelBuilder.Entity("MagicMelee.Models.DndCharacter", b =>
                {
                    b.Navigation("CharacterSpells");
                });

            modelBuilder.Entity("MagicMelee.Models.Skills", b =>
                {
                    b.Navigation("DndCharacter")
                        .IsRequired();
                });

            modelBuilder.Entity("MagicMelee.Models.Spell", b =>
                {
                    b.Navigation("CharacterSpells");
                });

            modelBuilder.Entity("MagicMelee.Models.User", b =>
                {
                    b.Navigation("ExistingCharacters");

                    b.Navigation("Login")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
